明示してなければ 2.3.8。

Ruby については [[Ruby tips]] 参照。

= コントローラからファイルを返す =
render のかわりに send_file / send_data を使う。

* send_file にはファイルパスを渡す。ファイルが実際にある場合はこちらが楽
* send_data にはバイナリデータを (String オブジェクトで) 渡す。ファイルがなくてもよい。

いづれも :disposition オプションで、インラインで表示させるか、ダウンロードダイアログを表示させるか選べる。(正確には、Content-Disposition ヘッダを設定する。)

<source lang="ruby">
send_file png_image_file_path, :type => 'image/png', :disposition => 'inline' #=> インラインで表示させたり、ブラウザ上で画像を表示させる場合
send_file png_image_file_path, :type => 'image/png' #=> こっちはダウンロードのダイアログが出る
</source>

* [http://apidock.com/rails/ActionController/Streaming/send_file send_file (ActionController::Streaming) - APIdock]
* [http://apidock.com/rails/ActionController/Streaming/send_data send_data (ActionController::Streaming) - APIdock]

* [http://www.ietf.org/rfc/rfc1806.txt RFC 1806 - Internet Engineering Task Force] Content-Disposition ヘッダについて
* [http://lab.moyo.biz/translations/rfc/rfc1806-ja.xsp RFC 1806: The Content-Disposition Header] 同日本語訳

= file_column 保存時に MIME タイプを取得 =
file_column の仕組みについては [http://d.hatena.ne.jp/elm200/20070730/1185776933 file_column プラグイン内部構造 - Rails で行こう！] がわかりやすい。
<source lang="ruby">
# ActiveRecord::Base のサブクラス内
file_column :file

alias :old_file= :file=
def file=(file)
  self.mime = file.content_type #=> 'image/png' とか
  old_file = file
end
</source>

= 404 とか 403 とかを render するメソッド =
render_error 404 などとすると、public/404.html を探してステータスコード 404 をつけて render し、false を返す。

<source lang="ruby">
# lib/render_error.rb
module RenderError
  def render_error(status_code)
    render :file => "public/#{status_code.to_s[0..2]}.html", :status => status_code
    return false
  end
end

class ActionController::Base
  include RenderError
end
</source>

== 使い方 ==
<source lang="ruby">
# render_error は false を返すので
# filter の返り値にそのまま使うとフィルターチェーンを中断できる
render_error 404
</source>

= by メソッド =
Restful Authentication や Devise を使ったアプリケーションで、functional test を書く際に、下記のような表記を可能にする。 どちらも認証に使う Model を User と決め打ちしているので、必要に応じて修正する必要がある。

<source lang="ruby">
# test/fixtures/users.yml
fixture_user_name:
  email: ...

# ブロック中を users(:fixture_user_name) からのリクエストとしてテスト
by :fixture_user_name do
  get :index
  assert_response :success
end

# lambda を users(:fixture_user_name) からのリクエストとしてテスト
get_index = lambda {
  get :index
  assert_response :success
}
by :fixture_user_name, get_index
</source>

== Restful Authentication 用 ==
<source lang="ruby">
# test/test_helper.rb
class ActiveSupport::TestCase
  def by(fixture_key, proc = nil)
    if fixture_key
      @request.session[:user_id] = users(fixture_key).id
      user_name = fixture_key.to_s.humanize
    else
      user_name = "Anonymous user"
    end

    if proc
      proc.call(user_name)
    else
      yield(user_name)
    end

    @request.session.delete :user_id
  end
end
</source>

== Devise 用 ==
<source lang="ruby">
# test/test_helper.rb
class ActiveSupport::TestCase
  def by(fixture_key, proc = nil)
    if fixture_key
      sign_in :user, users(fixture_key)
      user_name = fixture_key.to_s.humanize
    else
      user_name = "Anonymous user"
    end

    if proc
      proc.call(user_name)
    else
      yield(user_name)
    end

    sign_out users(fixture_key)
  end
end

# もちろん下記も必要
class ActionController::TestCase
  include Devise::TestHelpers
end
</source>

= environment.rb =
== gem 名とライブラリ名が異なる場合 ==
gem 名とライブラリ名が異なる場合、config.gem に :lib オプションでライブラリ名を指定しなければならない。これをしていないとサーバ起動時に Missing these required gems: などと怒られる。典型的には gem 名がハイフン入りで、ライブラリ名がスラッシュ入りになるもの。
<source lang="ruby">
# config/environment.rb
config.gem "diff-lcs", :lib => "diff/lcs"
</source>

= database.yml =
== Access denied for user 'root'@'localhost' (using password: YES) ==
rake db:migrate 時などに、上記のエラーが出た場合、database.yml をチェック。MySQL の場合、'''user''' ではなく '''username''' とするのが正しいみたい。
<pre>
production:
  adapter: mysql
  database: database_name
  username: database_user
  password: database_password
</pre>